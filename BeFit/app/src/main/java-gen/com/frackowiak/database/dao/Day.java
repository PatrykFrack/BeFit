package com.frackowiak.database.dao;

import com.frackowiak.database.db.DaoSession;
import de.greenrobot.dao.DaoException;

import com.frackowiak.database.db.ConfigurationDao;
import com.frackowiak.database.db.DayDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DAY.
 */
public class Day {

    private Long id;
    private String Name;
    private Long StartTime;
    private Long EndTime;
    private Long ConfigurationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DayDao myDao;

    private Configuration configuration;
    private Long configuration__resolvedKey;


    public Day() {
    }

    public Day(Long id) {
        this.id = id;
    }

    public Day(Long id, String Name, Long StartTime, Long EndTime, Long ConfigurationId) {
        this.id = id;
        this.Name = Name;
        this.StartTime = StartTime;
        this.EndTime = EndTime;
        this.ConfigurationId = ConfigurationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDayDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Long getStartTime() {
        return StartTime;
    }

    public void setStartTime(Long StartTime) {
        this.StartTime = StartTime;
    }

    public Long getEndTime() {
        return EndTime;
    }

    public void setEndTime(Long EndTime) {
        this.EndTime = EndTime;
    }

    public Long getConfigurationId() {
        return ConfigurationId;
    }

    public void setConfigurationId(Long ConfigurationId) {
        this.ConfigurationId = ConfigurationId;
    }

    /** To-one relationship, resolved on first access. */
    public Configuration getConfiguration() {
        Long __key = this.ConfigurationId;
        if (configuration__resolvedKey == null || !configuration__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConfigurationDao targetDao = daoSession.getConfigurationDao();
            Configuration configurationNew = targetDao.load(__key);
            synchronized (this) {
                configuration = configurationNew;
            	configuration__resolvedKey = __key;
            }
        }
        return configuration;
    }

    public void setConfiguration(Configuration configuration) {
        synchronized (this) {
            this.configuration = configuration;
            ConfigurationId = configuration == null ? null : configuration.getId();
            configuration__resolvedKey = ConfigurationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
