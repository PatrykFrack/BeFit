package com.frackowiak.database.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.frackowiak.database.dao.Errand;
import com.frackowiak.database.dao.WorkDay;

import com.frackowiak.database.dao.DoneErrand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DONE_ERRAND.
*/
public class DoneErrandDao extends AbstractDao<DoneErrand, Long> {

    public static final String TABLENAME = "DONE_ERRAND";

    /**
     * Properties of entity DoneErrand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Points = new Property(2, Integer.class, "Points", false, "POINTS");
        public final static Property GoalAchieved = new Property(3, Boolean.class, "GoalAchieved", false, "GOAL_ACHIEVED");
        public final static Property FinishedTime = new Property(4, java.util.Date.class, "FinishedTime", false, "FINISHED_TIME");
        public final static Property Uploaded = new Property(5, Boolean.class, "Uploaded", false, "UPLOADED");
        public final static Property WorkDayId = new Property(6, Long.class, "WorkDayId", false, "WORK_DAY_ID");
        public final static Property ErrandId = new Property(7, Long.class, "ErrandId", false, "ERRAND_ID");
    };

    private DaoSession daoSession;


    public DoneErrandDao(DaoConfig config) {
        super(config);
    }
    
    public DoneErrandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DONE_ERRAND' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: Name
                "'POINTS' INTEGER," + // 2: Points
                "'GOAL_ACHIEVED' INTEGER," + // 3: GoalAchieved
                "'FINISHED_TIME' INTEGER," + // 4: FinishedTime
                "'UPLOADED' INTEGER," + // 5: Uploaded
                "'WORK_DAY_ID' INTEGER," + // 6: WorkDayId
                "'ERRAND_ID' INTEGER);"); // 7: ErrandId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DONE_ERRAND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DoneErrand entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        Integer Points = entity.getPoints();
        if (Points != null) {
            stmt.bindLong(3, Points);
        }
 
        Boolean GoalAchieved = entity.getGoalAchieved();
        if (GoalAchieved != null) {
            stmt.bindLong(4, GoalAchieved ? 1l: 0l);
        }
 
        java.util.Date FinishedTime = entity.getFinishedTime();
        if (FinishedTime != null) {
            stmt.bindLong(5, FinishedTime.getTime());
        }
 
        Boolean Uploaded = entity.getUploaded();
        if (Uploaded != null) {
            stmt.bindLong(6, Uploaded ? 1l: 0l);
        }
 
        Long WorkDayId = entity.getWorkDayId();
        if (WorkDayId != null) {
            stmt.bindLong(7, WorkDayId);
        }
 
        Long ErrandId = entity.getErrandId();
        if (ErrandId != null) {
            stmt.bindLong(8, ErrandId);
        }
    }

    @Override
    protected void attachEntity(DoneErrand entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DoneErrand readEntity(Cursor cursor, int offset) {
        DoneErrand entity = new DoneErrand( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Points
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // GoalAchieved
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // FinishedTime
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // Uploaded
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // WorkDayId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // ErrandId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DoneErrand entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPoints(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGoalAchieved(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setFinishedTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUploaded(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setWorkDayId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setErrandId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DoneErrand entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DoneErrand entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWorkDayDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getErrandDao().getAllColumns());
            builder.append(" FROM DONE_ERRAND T");
            builder.append(" LEFT JOIN WORK_DAY T0 ON T.'WORK_DAY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ERRAND T1 ON T.'ERRAND_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DoneErrand loadCurrentDeep(Cursor cursor, boolean lock) {
        DoneErrand entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WorkDay workDay = loadCurrentOther(daoSession.getWorkDayDao(), cursor, offset);
        entity.setWorkDay(workDay);
        offset += daoSession.getWorkDayDao().getAllColumns().length;

        Errand errand = loadCurrentOther(daoSession.getErrandDao(), cursor, offset);
        entity.setErrand(errand);

        return entity;    
    }

    public DoneErrand loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DoneErrand> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DoneErrand> list = new ArrayList<DoneErrand>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DoneErrand> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DoneErrand> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
