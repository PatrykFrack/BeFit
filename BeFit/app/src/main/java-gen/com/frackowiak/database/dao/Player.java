package com.frackowiak.database.dao;

import com.frackowiak.database.db.DaoSession;
import de.greenrobot.dao.DaoException;

import com.frackowiak.database.db.PlayerDao;
import com.frackowiak.database.db.TeamDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PLAYER.
 */
public class Player {

    private Long id;
    private String Name;
    private Integer Points;
    private String Nickname;
    private Long TeamId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlayerDao myDao;

    private Team team;
    private Long team__resolvedKey;


    public Player() {
    }

    public Player(Long id) {
        this.id = id;
    }

    public Player(Long id, String Name, Integer Points, String Nickname, Long TeamId) {
        this.id = id;
        this.Name = Name;
        this.Points = Points;
        this.Nickname = Nickname;
        this.TeamId = TeamId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlayerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Integer getPoints() {
        return Points;
    }

    public void setPoints(Integer Points) {
        this.Points = Points;
    }

    public String getNickname() {
        return Nickname;
    }

    public void setNickname(String Nickname) {
        this.Nickname = Nickname;
    }

    public Long getTeamId() {
        return TeamId;
    }

    public void setTeamId(Long TeamId) {
        this.TeamId = TeamId;
    }

    /** To-one relationship, resolved on first access. */
    public Team getTeam() {
        Long __key = this.TeamId;
        if (team__resolvedKey == null || !team__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamDao targetDao = daoSession.getTeamDao();
            Team teamNew = targetDao.load(__key);
            synchronized (this) {
                team = teamNew;
            	team__resolvedKey = __key;
            }
        }
        return team;
    }

    public void setTeam(Team team) {
        synchronized (this) {
            this.team = team;
            TeamId = team == null ? null : team.getId();
            team__resolvedKey = TeamId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
