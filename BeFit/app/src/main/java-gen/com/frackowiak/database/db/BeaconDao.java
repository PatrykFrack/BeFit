package com.frackowiak.database.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.frackowiak.database.dao.Beacon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BEACON.
*/
public class BeaconDao extends AbstractDao<Beacon, Long> {

    public static final String TABLENAME = "BEACON";

    /**
     * Properties of entity Beacon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UUID = new Property(1, String.class, "UUID", false, "UUID");
        public final static Property MACAddress = new Property(2, String.class, "MACAddress", false, "MACADDRESS");
        public final static Property Major = new Property(3, String.class, "Major", false, "MAJOR");
        public final static Property Minor = new Property(4, String.class, "Minor", false, "MINOR");
        public final static Property Location = new Property(5, String.class, "Location", false, "LOCATION");
    };


    public BeaconDao(DaoConfig config) {
        super(config);
    }
    
    public BeaconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BEACON' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UUID' TEXT," + // 1: UUID
                "'MACADDRESS' TEXT," + // 2: MACAddress
                "'MAJOR' TEXT," + // 3: Major
                "'MINOR' TEXT," + // 4: Minor
                "'LOCATION' TEXT);"); // 5: Location
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BEACON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Beacon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(2, UUID);
        }
 
        String MACAddress = entity.getMACAddress();
        if (MACAddress != null) {
            stmt.bindString(3, MACAddress);
        }
 
        String Major = entity.getMajor();
        if (Major != null) {
            stmt.bindString(4, Major);
        }
 
        String Minor = entity.getMinor();
        if (Minor != null) {
            stmt.bindString(5, Minor);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(6, Location);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Beacon readEntity(Cursor cursor, int offset) {
        Beacon entity = new Beacon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MACAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Major
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Minor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Location
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Beacon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMACAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMajor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMinor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Beacon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Beacon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
