package com.frackowiak.database.dao;

import com.frackowiak.database.db.DaoSession;
import de.greenrobot.dao.DaoException;

import com.frackowiak.database.db.DoneErrandDao;
import com.frackowiak.database.db.ErrandDao;
import com.frackowiak.database.db.WorkDayDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DONE_ERRAND.
 */
public class DoneErrand {

    private Long id;
    private String Name;
    private Integer Points;
    private Boolean GoalAchieved;
    private java.util.Date FinishedTime;
    private Boolean Uploaded;
    private Long WorkDayId;
    private Long ErrandId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DoneErrandDao myDao;

    private WorkDay workDay;
    private Long workDay__resolvedKey;

    private Errand errand;
    private Long errand__resolvedKey;


    public DoneErrand() {
    }

    public DoneErrand(Long id) {
        this.id = id;
    }

    public DoneErrand(Long id, String Name, Integer Points, Boolean GoalAchieved, java.util.Date FinishedTime, Boolean Uploaded, Long WorkDayId, Long ErrandId) {
        this.id = id;
        this.Name = Name;
        this.Points = Points;
        this.GoalAchieved = GoalAchieved;
        this.FinishedTime = FinishedTime;
        this.Uploaded = Uploaded;
        this.WorkDayId = WorkDayId;
        this.ErrandId = ErrandId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDoneErrandDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Integer getPoints() {
        return Points;
    }

    public void setPoints(Integer Points) {
        this.Points = Points;
    }

    public Boolean getGoalAchieved() {
        return GoalAchieved;
    }

    public void setGoalAchieved(Boolean GoalAchieved) {
        this.GoalAchieved = GoalAchieved;
    }

    public java.util.Date getFinishedTime() {
        return FinishedTime;
    }

    public void setFinishedTime(java.util.Date FinishedTime) {
        this.FinishedTime = FinishedTime;
    }

    public Boolean getUploaded() {
        return Uploaded;
    }

    public void setUploaded(Boolean Uploaded) {
        this.Uploaded = Uploaded;
    }

    public Long getWorkDayId() {
        return WorkDayId;
    }

    public void setWorkDayId(Long WorkDayId) {
        this.WorkDayId = WorkDayId;
    }

    public Long getErrandId() {
        return ErrandId;
    }

    public void setErrandId(Long ErrandId) {
        this.ErrandId = ErrandId;
    }

    /** To-one relationship, resolved on first access. */
    public WorkDay getWorkDay() {
        Long __key = this.WorkDayId;
        if (workDay__resolvedKey == null || !workDay__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkDayDao targetDao = daoSession.getWorkDayDao();
            WorkDay workDayNew = targetDao.load(__key);
            synchronized (this) {
                workDay = workDayNew;
            	workDay__resolvedKey = __key;
            }
        }
        return workDay;
    }

    public void setWorkDay(WorkDay workDay) {
        synchronized (this) {
            this.workDay = workDay;
            WorkDayId = workDay == null ? null : workDay.getId();
            workDay__resolvedKey = WorkDayId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Errand getErrand() {
        Long __key = this.ErrandId;
        if (errand__resolvedKey == null || !errand__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ErrandDao targetDao = daoSession.getErrandDao();
            Errand errandNew = targetDao.load(__key);
            synchronized (this) {
                errand = errandNew;
            	errand__resolvedKey = __key;
            }
        }
        return errand;
    }

    public void setErrand(Errand errand) {
        synchronized (this) {
            this.errand = errand;
            ErrandId = errand == null ? null : errand.getId();
            errand__resolvedKey = ErrandId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
