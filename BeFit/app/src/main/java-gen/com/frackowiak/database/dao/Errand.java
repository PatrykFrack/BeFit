package com.frackowiak.database.dao;

import com.frackowiak.database.db.DaoSession;
import de.greenrobot.dao.DaoException;

import com.frackowiak.database.db.BeaconDao;
import com.frackowiak.database.db.ErrandDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ERRAND.
 */
public class Errand {

    private Long id;
    private String Name;
    private String Description;
    private String Goal;
    private Integer Points;
    private Long BeaconMain;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ErrandDao myDao;

    private Beacon beacon;
    private Long beacon__resolvedKey;


    public Errand() {
    }

    public Errand(Long id) {
        this.id = id;
    }

    public Errand(Long id, String Name, String Description, String Goal, Integer Points, Long BeaconMain) {
        this.id = id;
        this.Name = Name;
        this.Description = Description;
        this.Goal = Goal;
        this.Points = Points;
        this.BeaconMain = BeaconMain;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getErrandDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public String getDescription() {
        return Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    public String getGoal() {
        return Goal;
    }

    public void setGoal(String Goal) {
        this.Goal = Goal;
    }

    public Integer getPoints() {
        return Points;
    }

    public void setPoints(Integer Points) {
        this.Points = Points;
    }

    public Long getBeaconMain() {
        return BeaconMain;
    }

    public void setBeaconMain(Long BeaconMain) {
        this.BeaconMain = BeaconMain;
    }

    /** To-one relationship, resolved on first access. */
    public Beacon getBeacon() {
        Long __key = this.BeaconMain;
        if (beacon__resolvedKey == null || !beacon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BeaconDao targetDao = daoSession.getBeaconDao();
            Beacon beaconNew = targetDao.load(__key);
            synchronized (this) {
                beacon = beaconNew;
            	beacon__resolvedKey = __key;
            }
        }
        return beacon;
    }

    public void setBeacon(Beacon beacon) {
        synchronized (this) {
            this.beacon = beacon;
            BeaconMain = beacon == null ? null : beacon.getId();
            beacon__resolvedKey = BeaconMain;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
